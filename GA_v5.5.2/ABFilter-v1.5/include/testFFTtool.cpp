/* ***********************************************************************

Copyright or Â© or Copr. INRIA, France
contributor(s) : Maria-Jose Escobar, Adrien Wohrer (January 2011)

email: Maria-Jose.Escobar@inria.fr

This software is a computer program whose purpose is to help the 
implementation of spatiotemporal filtering in video sequences. 
Specifically, this library implements the physiological plausible 
filters proposed by Adelson and Bergen (1985).

This software is governed by the CeCILL-C license under French law and
abiding by the rules of distribution of free software.  You can  use, 
modify and/ or redistribute the software under the terms of the CeCILL-C
license as circulated by CEA, CNRS and INRIA at the following URL
"http://www.cecill.info". 

As a counterpart to the access to the source code and  rights to copy,
modify and redistribute granted by the license, users are provided only
with a limited warranty  and the software's author,  the holder of the
economic rights,  and the successive licensors  have only  limited
liability. 

In this respect, the user's attention is drawn to the risks associated
with loading,  using,  modifying and/or developing or reproducing the
software by the user in light of its specific status of free software,
that may mean  that it is complicated to manipulate,  and  that  also
therefore means  that it is reserved for developers  and  experienced
professionals having in-depth computer knowledge. Users are therefore
encouraged to load and test the software's suitability as regards their
requirements in conditions enabling the security of their systems and/or 
data to be ensured and,  more generally, to use and operate it in the 
same conditions as regards security. 

The fact that you are presently reading this means that you have had
knowledge of the CeCILL-C license and that you accept its terms.

*********************************************************************** */


#include <iostream>
#include "fftTools.h"

using namespace std;
using namespace cimg_library;

void convertRGBToGray(CImg<double> in, CImg<double> &out)
{
    for(int i = 0; i < in.dimx(); i ++)
        for(int j = 0; j < in.dimy(); j ++)
            out(i,j) = 0.3*in(i,j,0,0) + 0.59*in(i,j,0,1) + 0.11*in(i,j,0,2);
}


// ============================================================================
//
//  testFFTtool's usage:
//		
//		./testFFTtool <inputImag> <kernelImag>
//
//	This program filters spatially the input image <inputImag> with the
//	filter indicated in <kernelImag>.
//	The result of the filtering (equivalent to the spatial convolution
//	between the two images) is saved as convolutionWithFFTtool.jpg.
//
//  Compilation: run compileTestFFT.ksh to compile and generate the binary file.
//	Be aware of to change the absolute paths before run the script.
//
int main(int argc, char *argv[])
{
    string imagName, kernelName;

    if( argc < 3 )
    {
	if( argc > 1 )
	{
	    if (strcmp(argv[1], "-h") == 0)
	    {
		printf("\nUsage:\n\t./testFFTtool <inputImag> <kernelImag>\n\n");
		printf("Description (you are not forced to read it!):\n\n"
			"\tThis program filters spatially the input image <inputImag> with the\n"
			"\tfilter indicated in <kernelImag>.\n"
			"\tThe result of the filtering (equivalent to the spatial convolution\n"
			"\tbetween the two images) is saved as convolutionWithFFTtool.jpg.\n\n");

		return 0;
	    }
	} 
	else{
	    printf("ERROR, type -h to see usage and help information\n");
	    return -1;
	}
    }
    imagName = argv[1];
    kernelName = argv[2];

    // ---------------------------------------------------
    //  Creation of CImg<doubl> variables to manage
    //  the inputs inputImag and kernelImag.
    CImg<double> inImagRGB(imagName.c_str()); 
    CImg<double> kernelRGB(kernelName.c_str());
    CImg<double> convImag(inImagRGB.dimx(), inImagRGB.dimy());
    CImg<double> inImag(inImagRGB.dimx(), inImagRGB.dimy());
    CImg<double> kernel(kernelRGB.dimx(), kernelRGB.dimy());

    // ---------------------------------------------------
    //  Declaration of FFTtool object, see fftTool.h for
    //  details.
    FFTtool fft;

    // ---------------------------------------------------
    //  The FFT images generated by FFTTool are in format
    //  COMPLEX_IMAG, see fftTool.h for details of the format.
    COMPLEX_IMAG fftInImag, fftKernel, mulImag;

    // ---------------------------------------------------
    //  The images must be in grayscale format, so convert them 
    convertRGBToGray(inImagRGB, inImag);
    convertRGBToGray(kernelRGB, kernel);

    // ---------------------------------------------------
    //  It is very important normalize the images before
    //  calculate the FFT. The FFTs generated for <inImag> 
    //  and <kernel> are stored in <fftInImag> and 
    //  <fftKernel>, respectively.
    printf("\n> Getting FFT transforms\n");
    inImag.normalize(0,1);
    kernel.normalize(0,1);
    fftInImag = fft.getFFTtransform( inImag );
    fftKernel = fft.getFFTtransform( kernel, inImag.dimx(), inImag.dimy() );

    // ---------------------------------------------------
    //  Now the filtering is done multiplying the frequency
    //  space of the two images. The FFT of the filtered
    //  image is stored in <mulImag> variable.
    //  After <mulImag> is generated, calculate inverse of FFT to
    //  recover the final image, it is important to call 
    //  FFTtool::quadrantShift() if the inverse comes from a 
    //  multipication of two FFT images.
    printf("> Getting the inverse of the convolution, after multiplying the FFTs obtained\n");
    mulImag = fft.multComplexImages(fftInImag, fftKernel);
    convImag = fft.getFFTinverse( mulImag );
    fft.quadrantShift( convImag );

    // ---------------------------------------------------
    //  Normalizing for human visibility and sava the output
    printf("Saving data...");
    convImag.normalize(0, 255);
    convImag.save("convolutionWithFFTtool.jpg");
    printf("DONE!!\n\n");

    return 0;
}
